The element dp[i] in dp array records the length of the longest strictly increasing subsequence which ends up with nums[i]. By comparing nums[i] and each element before nums[i],say nums[j], we can yield dp[i] using dp[j].The terminal result is the maximum of dp array.

* 

```
class Solution {
    public int lengthOfLIS(int[] nums) {
        //initialize dp array
        int[] dp = new int[nums.length];
        Arrays.fill(dp,1);
        int max = 1;
        for(int i = 0; i<nums.length; i++){
            for(int j = 0; j<i; j++){
                //transformation function
                if(nums[i]>nums[j]){
                    dp[i] = Math.max(dp[i],dp[j]+1);
                }
            }
            max = Math.max(max,dp[i]);
        }
        return max;
    }
}
```

